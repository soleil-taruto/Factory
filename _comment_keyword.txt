----
固有の意味を持つコメント

// ts_

	スレッドセーフである。

// mbs_

	マルチバイト文字を考慮している。

// pub_member

	構造体メンバは何処からでも自由にアクセスして良い。

// static member

	構造体メンバは「構造体が定義されているヘッダ、ヘッダと同名のソース」以外からアクセスしてはならない。

// ? xxx

	条件 xxx が真ならば...
	または
	条件 xxx が真であることを示す真偽値

// ? ! xxx

	条件 xxx が偽ならば...
	または
	条件 xxx が偽であることを示す真偽値

// ppp: xxx

	引数 ppp は xxx である。

// ret: xxx

	戻り値は xxx である。

// xxx: yyy == zzz

	xxx が yyy のときは zzz である。

	例
		ret: NULL == 失敗     ---->     戻り値が NULL のときは失敗である。

// "XYZ"

	'X', 'Y', 'Z' の値を取る。

// "XYZ" == xxx, yyy, zzz

	'X', 'Y', 'Z' の値を取り、
	'X' の意味は xxx, 'Y' の意味は yyy, 'Z' の意味は zzz である。

// g

	ゴミが発生する。
	ここで確保したメモリブロックは開放しない。
	または
	ここに到達するまでに確保されたメモリブロックのうち開放せずにスコープを外れるものがある。

// 2bs

	to be safe
	安全性やわかりやすさのために実装しているだけで、実装する必要は無いはず。
	過剰なチェック処理
	アサーションみたいなもの

// 2bs?

	元は "// 2bs" だったけど、今は実装する必要がある。

// HACK
// HACK: xxx

	アノテーションコメントの付け方に問題があったので、一旦 TODO 以外を HACK に統一した。@ 2020.8.3

// ret: strx()

	この関数内で動的に確保したメモリブロック上の文字列を返す。

// ret: strr(xxx)

	この関数内で xxx を再配置したメモリブロック上の文字列を返す。

// external

	この関数宣言の実体は別のモジュールに定義されている。

// use int

	このファイルでは uint, sint 縛りをしない。


----
機能を持つコメント

// app > @ xxx
// < app

	アプリ固有コード
	xxx は任意の識別名, xxx は <> であること。(何でも良い)
	同じ xxx 同士のインデント幅は同じでなければならない。
	https://github.com/stackprobe/Factory/blob/master/SubTools/CopyLib.c

// discmt >
// < discmt

	自動コメント抑止
	https://github.com/stackprobe/Factory/blob/master/SubTools/CopyLib.c

// ^ sync @ xxx

	同期コード
	xxx は任意の識別名, xxx は <1,,__09AZaz> であること。
	同じ xxx 同士のインデント幅は違っていても良いが、同期時にインデント幅は調整されない。
	https://github.com/stackprobe/Factory/blob/master/DevTools/SyncDevUsing.c

// sync > @ xxx
// < sync

	同期コード
	xxx は任意の識別名, xxx は <1,,__09AZaz> であること。
	同じ xxx 同士のインデント幅は違っていても良い。同期時にインデント幅は調整される。
	https://github.com/stackprobe/Factory/blob/master/DevTools/SyncDevRange.c


★ _memo_Cx.txt にも記載あり。


----
固有の意味を持つ識別子内の接頭辞・接尾辞・パターン

x_

	戻り値は呼び出し側で開放しなければならない。

c_

	戻り値は呼び出し側で開放してはならない。

_x

	引数は関数内で開放される。

_c

	引数は関数内で開放されない。

	-- -- --

	★補足
		_xx, _ccc, _xcx, _ccxc のように組み合わせることがある。
		xc の並びは引数の並びに一致する。
		xc の並びの個数が引数の個数より少ないことがある。(開放の有無の議論が無い引数は飛ばすため)

		c_ はモジュール(.obj)では使用禁止, 実行形式(.exe)でのみ使用する。
		(c_の戻り値を使っている間、同じc_は呼べない。モジュールで呼ばれると何時何処で呼ばれるか把握出来なくなるため)

	-- -- --


- - -

ne_

	戻り値が NULL になる場合は error(); にする。

nn_

	戻り値が NULL になる場合は代替値を返す。

/* 廃止
ts_

	スレッドセーフである。
*/

mbs_

	マルチバイト文字を考慮している。

m_

	マクロである。


- - -

get と ref

	get ... 値や要素を取得する。目的の値や要素は存在しなければならない。
	ref ... 値や要素を取得する。目的の値や要素が存在しなければ代替値を返す。

set と put

	set ... 値や要素を設定する。設定先の領域は確保されていなければならない。
	put ... 値や要素を設定する。設定先の領域が確保されていなければ領域の確保も行う。

add と unadd

	add   ... リストの最後に追加
	unadd ... リストの最後から取り出す。(addの逆)

insert と desert

	insert ... リストの指定位置に挿入
	desert ... リストの指定位置から取り出す。(insertの逆)


- - -

2

	To

	例
		c2upper        ---->     c To upper
		line2JLine     ---->     line To JLine

